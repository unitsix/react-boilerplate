service: ${env:REALM}-${env:PROJECT}

plugins:
  - "@unitsix/serverless-spa-plugin"

custom:
  s3LocalPath: dist/
  s3DestPath: /

provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:AWS_REGION}
  stage: ${env:ENV}
  deploymentBucket:
    name: serverless-deployments-${env:AWS_ACCOUNT_ID}-${env:AWS_REGION}

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    { "Ref": "WebAppS3Bucket" },
                    "/*"
                  ]
                ]
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - WebAppS3Bucket
                  - DomainName
              Id:
                Fn::Join: [
                  "", [
                    "S3-",
                    { "Ref": "WebAppS3Bucket" }
                  ]
                ]
              S3OriginConfig: {}
          Enabled: 'true'
          Aliases:
          - ${env:DOMAIN_NAME}
          DefaultRootObject: /index.html
          ## Since the Single Page App is taking care of the routing we need to
          ## make sure every path is served with index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId:
              Fn::Join: [
                "", [
                  "S3-",
                  { "Ref": "WebAppS3Bucket" }
                ]
              ]
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${env:SSL_CERT}
            SslSupportMethod: sni-only
    RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        TTL: 60
        HostedZoneName: ${env:AWS_HOSTED_ZONE}
        Name: ${env:DOMAIN_NAME}
        Type: CNAME
        ResourceRecords:
        - 'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
  Outputs:
    WebAppS3BucketOutput:
      Value:
        'Ref': WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
    WebAppCloudFrontDistributionIdOutput:
      Description: "CloudFront distribution ID, used for automatic invalidation during deployment"
      Value:
        Ref: WebAppCloudFrontDistribution
      Export:
        Name: "${self:service}-${env:ENV}-CloudFront-Id"
